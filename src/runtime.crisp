(def Keyword (.-Keyword (require "./types")))
(def Symbol (.-Symbol (require "./types")))

(defn atom?
  [form]
  (not (instanceof? form Array)))
(export atom?)

(defn self-evaluating?
  [form]
  (or (= (typeof form) "boolean")
      (= (typeof form) "number")
      (= (typeof form) "string")))
(export self-evaluating?)

(defn identity
  [x] x)
(export identity)

(defn equal
  [x y]
  (if (= (typeof x) "undefined")
    (= (typeof y) "undefined")
    (if (= (typeof y) "undefined")
      false
      (if (.-equal x)
        (.equal x y)
        (if (.-equal y)
          (.equal y x)
          (if (identical? (typeof x) (typeof y))
            (= x y)
            (throw "Cannot determine equality for objects " x " and " y)))))))
(export equal)

(defn Lambda
  [args rest body env]
  (set! this.args args)
  (set! this.rest rest)
  (set! this.body body)
  (set! this.env env)
  this)

(set! Lambda.prototype.toString
      (fn [] "[ Lambda ]"))

(export Lambda)

(defn Macro
  [args rest body env]
  (set! this.args args)
  (set! this.rest rest)
  (set! this.body body)
  (set! this.env env)
  this)

(set! Macro.prototype.toString
      (fn [] "[ Macro ]"))

(export Macro)

(defn Environment
  [])

(set! Environment.prototype.extend
      (fn []
        (defn Parent [])
        (set! Parent.prototype this)
        (Parent.)))

(export Environment)
