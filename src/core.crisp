(def format (.-format (require "util")))
(def inspect (.-inspect (require "util")))
(def equal (require "deep-equal"))
(def first crisp.types.first)
(def second crisp.types.second)
(def rest crisp.types.rest)
(def count crisp.types.count)
(def LazySeq crisp.types.LazySeq)
(def Cons crisp.types.Cons)

(def defmacro
  (macro [name args body]
         `(def ~name
            (macro ~args ~body))))

(defmacro do
  [& body]
  `((fn [] ~@body)))

(defmacro defn
  [name args & body]
  `(def ~name
     (fn ~args ~@body)))

(defn number?
  [x]
  (= (typeof x) "number"))

(defn zero?
  [x]
  (= 0 x))

;; TODO Badly defined. Doesn't use the seq abstraction.
(defn empty?
  [x]
  (zero? (count x)))

(def self-evaluating?
  (fn [form]
    (or (= (typeof form) "number")
        (= (typeof form) "string"))))

(defn inc [x] (+ 1 x))
(defn dec [x] (- 1 x))

(defn cons
  [head seq]
  (Cons. head seq))

(defmacro lazy-seq
  [& body]
  `(LazySeq. (fn [] ~@body)))

(defn map
  [f coll]
  (lazy-seq
   (cons (f (first coll))
         (map f (rest coll)))))

(defn join
  [coll string]
  (+ (first coll)
     string
     (join (rest coll) string)))

(defn range
  [x]
  (lazy-seq
   (cons x (range (inc x)))))

(defn drop
  [n aseq]
  (if (= 0 n)
    aseq
    (drop (dec n)
          (rest aseq))))

;; (defn pr-str
;;   [x]
;;   (cond
;;    (number? x) (format "%d" x)
;;    :else (format "%s" str)))

;; (defn println
;;   [& xs]
;;   (apply console.log (map pr-str xs)))

;; (defn println
;;   [x]
;;   (console.log
;;    (pr-str x)
;;    ))

;; (println (first (range 15)))

;; TODO This could be made more efficient. Take every even-numbered
;; binding as the arg, every odd-numbered binding as the value.
(defmacro let
  [bindings & body]
  (if (< (count bindings) 1)
    `((fn [] ~@body))
    `((fn [~(first bindings)]
        (let ~(rest (rest bindings))
          ~@body))
      ~(second bindings))))
